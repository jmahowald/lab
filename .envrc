set_aws_env personal || echo "no such function"


export TF_VPC_LOCATION=github.com/jmahowald/terraform-aws-vpc/
export TF_ECS_LOCATION=github.com/jmahowald/terraform-ecs-modules/


# Load the env file
source .env
export ENV_NAME=$ENV_LEVEL-$ENV_COLOR
# Some names can't handle alphanumeric (actually only dbinstance as var as I know)
export ENV_NAME_ALPHA=${ENV_LEVEL}${ENV_COLOR}



export TF_VAR_zone_name=${TF_VAR_zone_name:-$ENV_NAME.$DNS_BASE}
export TF_VAR_aws_region=$AWS_DEFAULT_REGION
export TF_VAR_key_name=$ENV_NAME

export TF_VAR_environment=$ENV_NAME


export TF_VAR_key_dir=$(pwd)/keys
export TF_VAR_ssh_keypath=$TF_VAR_key_dir/$ENV_NAME.pem

# Recreating full network and VPC is overkill in some situations, e.g. qa+dev so we must 
# allow the conventions on where to find the remote state to be overriden
export REMOTE_STATE_BUCKET=${REMOTE_STATE_BUCKET:-terraform.$ENV_NAME.$DNS_BASE}
export REMOTE_STATE_BUCKET_REGION=${REMOTE_STATE_BUCKET_REGION:-$AWS_DEFAULT_REGION}

#export ANSIBLE_VAULT_PASSWORD_FILE=${PWD}/${ENV_NAME}-vault-password.txt
#ansible-vault decrypt .envrc.${ENV_NAME}.vault --output .envrc.${ENV_NAME}.secret
#source .envrc.${ENV_NAME}.secret
#rm .envrc.${ENV_NAME}.secret
